
# Make sure Pi-hole is responding.

template: pihole_last_collected_secs
      on: pihole.dns_queries_total
    calc: $now - $last_collected_t
   units: seconds ago
   every: 10s
    warn: $this > (($status >= $WARNING)  ? ($update_every) : ( 5 * $update_every))
    crit: $this > (($status == $CRITICAL) ? ($update_every) : (60 * $update_every))
   delay: down 5m multiplier 1.5 max 1h
    info: number of seconds since the last successful data collection
      to: webmaster

# Blocked DNS queries.

template: pihole_blocked_queries
      on: pihole.dns_queries_percentage
   every: 10s
   units: %
    calc: $blocked
    warn: $this > ( ($status >= $WARNING ) ? ( 45 ) : ( 55 ) )
    crit: $this > ( ($status >= $CRITICAL) ? ( 55 ) : ( 75 ) )
   delay: up 2m down 5m
    info: percentage of blocked dns queries for the last 24 hour
      to: sysadmin


# Blocklist last update time.
# Default update interval is a week.

template: pihole_blocklist_last_update
      on: pihole.blocklist_last_update
   every: 10s
   units: seconds
    calc: $ago
    warn: $this > 60 * 60 * 24 * 8
    crit: $this > 60 * 60 * 24 * 8 * 2
    info: blocklist last update time
      to: sysadmin

# Gravity file check (gravity.list).

template: pihole_blocklist_gravity_file
      on: pihole.blocklist_last_update
   every: 10s
   units: boolean
    calc: $file_exists
    crit: $this != 1
   delay: up 2m down 5m
    info: gravity file existence
      to: sysadmin

# Pi-hole's ability to block unwanted domains.
# Should be enabled. The whole point of Pi-hole!

template: pihole_status
      on: pihole.unwanted_domains_blocking_status
   every: 10s
   units: boolean
    calc: $enabled
    warn: $this != 1
   delay: up 2m down 5m
    info: unwanted domains blocking status
      to: sysadmin
